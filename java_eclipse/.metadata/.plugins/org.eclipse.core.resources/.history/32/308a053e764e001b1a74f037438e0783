package projecteuler;

import java.util.Arrays;

public class Zadatak14 {

	public static void main(String[] args) {
		// The following iterative sequence is defined for the set of positive integers:
		// n → n/2 (n is even)
		// n → 3n + 1 (n is odd)
		// Using the rule above and starting with 13, we generate the following
		// sequence:
		// 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
		// It can be seen that this sequence (starting at 13 and finishing at 1)
		// contains 10 terms. Although it has not been proved yet (Collatz Problem), it
		// is thought that all starting numbers finish at 1.
		// Which starting number, under one million, produces the longest chain?
		// NOTE: Once the chain starts the terms are allowed to go above one million.
		
//		int najveci=0;
//		
//		System.out.println(niz());
			
		int number = 1000000;
		 
		long sequenceLength = 0;
		long startingNumber = 0;
		long sequence;
		 
		for (int i = 2; i <= number; i++) {
		    int length = 1;
		    sequence = i;
		    while (sequence != 1) {
		        if ((sequence % 2) == 0) {
		            sequence = sequence / 2;
		        } else {
		            sequence = sequence * 3 + 1;
		        }
		        length++;
		    }
		 
		    //Check if sequence is the best solution
		    if (length > sequenceLength) {
		        sequenceLength = length;
		        startingNumber = i;
		        System.out.println(startingNumber);
		    }
		}
		
	
		

		
		
	}
	
//	public static void niz(){
//		int[] niz=new int[500];
//		
//		for(int i=0; i<20; i++) {
//			niz[0]=i;
//			for(int j=0; j<499;j++) {
//				if(niz[j]%2==0 && niz[j]!=1) {
//					niz[j+1]=niz[j]/2;
//				}else if(niz[j]%2!=0 && niz[j]!=1) {
//					niz[j+1]=3*niz[j]+1;
//				}
//			}
//		}
//		
//	}
}
